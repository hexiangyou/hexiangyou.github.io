<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot限流配置（Bucket4j）</title>
    <link href="/2025/07/31/springboot%E9%99%90%E6%B5%81%E9%85%8D%E7%BD%AE%EF%BC%88Bucket4j%EF%BC%89/"/>
    <url>/2025/07/31/springboot%E9%99%90%E6%B5%81%E9%85%8D%E7%BD%AE%EF%BC%88Bucket4j%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Bucket4j对controller接口进行限流配置"><a href="#使用Bucket4j对controller接口进行限流配置" class="headerlink" title="使用Bucket4j对controller接口进行限流配置"></a>使用Bucket4j对controller接口进行限流配置</h2><p>步骤1：添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.vladimir-bukhtoyarov<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bucket4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>只对一个接口单独限流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.github.bucket4j.*;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JudgeController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Bucket bucket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JudgeController</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 每10秒5个令牌；也即每10秒只能请求5次</span><br>        <span class="hljs-type">Bandwidth</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> Bandwidth.classic(<span class="hljs-number">5</span>, Refill.intervally(<span class="hljs-number">5</span>, Duration.ofSeconds(<span class="hljs-number">10</span>)));<br>        <span class="hljs-built_in">this</span>.bucket = Bucket4j.builder().addLimit(limit).build();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> JudgeRequest request)</span> &#123;<br>        <span class="hljs-comment">// 消耗令牌</span><br>        <span class="hljs-keyword">if</span> (!bucket.tryConsume(<span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS)<br>                    .body(<span class="hljs-string">&quot;Rate limit exceeded. Try again later.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(request);<br>            String[] cmd = &#123;<br>                    <span class="hljs-string">&quot;docker&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;judge0-server-1&quot;</span>,<br>                    <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;-X&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;http://localhost:2358/submissions?base64_encoded=false&amp;wait=true&quot;</span>,<br>                    <span class="hljs-string">&quot;-H&quot;</span>, <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>,<br>                    <span class="hljs-string">&quot;-d&quot;</span>, json<br>            &#125;;<br>            <span class="hljs-keyword">return</span> runCommand(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)<br>                    .body(<span class="hljs-string">&quot;Error building submission: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试限流功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRateLimiting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        headers.setContentType(MediaType.APPLICATION_JSON);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;source_code\&quot;:\&quot;print(1)\&quot;,\&quot;language_id\&quot;:71&#125;&quot;</span>;<br>        HttpEntity&lt;String&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(body, headers);<br>        <span class="hljs-keyword">try</span>&#123;<br>            ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(<span class="hljs-string">&quot;http://localhost:8083/api/v1/admin/judge/submit&quot;</span>, request, String.class);<br>            System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + i + <span class="hljs-string">&quot; → Status: &quot;</span> + response.getStatusCode());<br>        &#125;<span class="hljs-keyword">catch</span> (HttpClientErrorException.TooManyRequests e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + i + <span class="hljs-string">&quot; → Status: 429 Too Many Requests&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <strong>Bucket4j</strong> 对 <strong>不同 API 路径</strong> 进行 <strong>单独限流</strong>：（创建限流过滤器）<br>Spring Boot 会自动把这个 <code>Filter</code> 注册到整个 Web 请求处理链中。因此，**每一个 HTTP 请求在进入 Controller 之前，都会经过这个 <code>Filter</code>**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.github.bucket4j.Bandwidth;<br><span class="hljs-keyword">import</span> io.github.bucket4j.Bucket;<br><span class="hljs-keyword">import</span> io.github.bucket4j.Refill;<br><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-comment">// 保存每个路径的限流桶</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Bucket&gt; buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br>            <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br><span class="hljs-comment">// 获取请求的URI</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> httpRequest.getRequestURI();<br><br>        <span class="hljs-comment">// 获取对应路径的限流 Bucket；确保第一次访问某个路径时会创建一个限流桶，以后复用。</span><br>        <span class="hljs-type">Bucket</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> buckets.computeIfAbsent(path, <span class="hljs-built_in">this</span>::createBucketForPath);<br><span class="hljs-comment">//尝试消耗一个令牌</span><br>        <span class="hljs-keyword">if</span> (bucket.tryConsume(<span class="hljs-number">1</span>)) &#123;<br>            chain.doFilter(request, response); <span class="hljs-comment">// 放行请求</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            httpResponse.setStatus(<span class="hljs-number">429</span>); <span class="hljs-comment">// Too Many Requests</span><br>            httpResponse.getWriter().write(<span class="hljs-string">&quot;Rate limit exceeded for path: &quot;</span> + path);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Bucket <span class="hljs-title function_">createBucketForPath</span><span class="hljs-params">(String path)</span> &#123;<br>        <span class="hljs-comment">// 为不同路径设置不同的限流策略</span><br>        <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">&quot;/languages&quot;</span>)) &#123;<br>            <span class="hljs-comment">// /languages：10秒最多5次</span><br>            <span class="hljs-keyword">return</span> Bucket.builder()<br>                    .addLimit(Bandwidth.classic(<span class="hljs-number">5</span>, Refill.intervally(<span class="hljs-number">5</span>, Duration.ofSeconds(<span class="hljs-number">10</span>))))<br>                    .build();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">&quot;/submit&quot;</span>)) &#123;<br>            <span class="hljs-comment">// /submit：10秒最多2次</span><br>            <span class="hljs-keyword">return</span> Bucket.builder()<br>                    .addLimit(Bandwidth.classic(<span class="hljs-number">2</span>, Refill.intervally(<span class="hljs-number">2</span>, Duration.ofSeconds(<span class="hljs-number">10</span>))))<br>                    .build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 默认：10秒最多20次</span><br>            <span class="hljs-keyword">return</span> Bucket.builder()<br>                    .addLimit(Bandwidth.classic(<span class="hljs-number">20</span>, Refill.intervally(<span class="hljs-number">20</span>, Duration.ofSeconds(<span class="hljs-number">10</span>))))<br>                    .build();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时在controller中就不需要多余的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Judge0Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/languages&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">getLanguages</span><span class="hljs-params">()</span> &#123;<br>        String[] cmd = &#123;<br>                <span class="hljs-string">&quot;docker&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;judge0-server-1&quot;</span>,<br>                <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;http://localhost:2358/languages&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">return</span> runCommand(cmd);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/submit&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">submitCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Submit endpoint accessed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/ping&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">ping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;pong&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">runCommand</span><span class="hljs-params">(String[] cmd)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd).start();<br>            process.waitFor();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(process.getInputStream().readAllBytes());<br>            <span class="hljs-keyword">return</span> ResponseEntity.ok(output);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)<br>                    .body(<span class="hljs-string">&quot;Command execution failed: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试接口：（<strong>使用线程池</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLanguagesRateLimiting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">requestCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">successCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">tooManyRequestsCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//用于等待所有任务完成的同步工具</span><br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(requestCount);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= requestCount; i++) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">requestNumber</span> <span class="hljs-operator">=</span> i;<br>        executor.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(<br>                    <span class="hljs-string">&quot;http://localhost:8083/api/v1/admin/judge/languages&quot;</span>, <br>                    String.class<br>                );<br>                <br>                <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusCodeValue();<br>                System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + requestNumber + <span class="hljs-string">&quot; → Status: &quot;</span> + statusCode);<br>                <br>                <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">200</span>) &#123;<br>                    successCount.incrementAndGet();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (HttpClientErrorException.TooManyRequests e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + requestNumber + <span class="hljs-string">&quot; → Status: 429 Too Many Requests&quot;</span>);<br>                tooManyRequestsCount.incrementAndGet();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.err.println(<span class="hljs-string">&quot;Request &quot;</span> + requestNumber + <span class="hljs-string">&quot; failed: &quot;</span> + e.getMessage());<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//主线程（执行测试方法的线程）会阻塞在这里，直到latch的计数器减到 0</span><br>        latch.await();<br>        executor.shutdown();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        Thread.currentThread().interrupt();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Total requests: &quot;</span> + requestCount);<br>    System.out.println(<span class="hljs-string">&quot;Successful requests: &quot;</span> + successCount.get());<br>    System.out.println(<span class="hljs-string">&quot;Too Many Requests (429): &quot;</span> + tooManyRequestsCount.get());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离线部署docker and judge0日志</title>
    <link href="/2025/07/27/%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2docker-and-judge0%E6%97%A5%E5%BF%97/"/>
    <url>/2025/07/27/%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2docker-and-judge0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h2 id="离线部署docker"><a href="#离线部署docker" class="headerlink" title="离线部署docker"></a>离线部署docker</h2><p>首先下载离线安装包：<a href="https://download.docker.com/linux/static/stable/">https://download.docker.com/linux/static/stable/</a></p><p>将安装包拷贝到目标服务器上</p><p>在主机上解压文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvzf docker-26.1.4.tgz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压完之后的文件会放到当前目录中的docker目录中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">递归的赋予docker目录中文件可执行权限</span><br>sudo chmod 755 -R docker <br>sudo cp docker/* /usr/bin/<br></code></pre></td></tr></table></figure><p>配置docker服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br>  <br>[Service]<br>Type=notify<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the default is not to use systemd <span class="hljs-keyword">for</span> cgroups because the delegate issues still</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">exists and systemd currently does not support the cgroup feature <span class="hljs-built_in">set</span> required</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> containers run by docker</span><br>ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock --selinux-enabled=false --default-ulimit nofile=65536:65536<br>ExecReload=/bin/kill -s HUP $MAINPID<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">in</span> the kernel. We recommend using cgroups to <span class="hljs-keyword">do</span> container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Uncomment TasksMax <span class="hljs-keyword">if</span> your systemd version supports it.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this version.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">TasksMax=infinity</span><br>TimeoutStartSec=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> delegate <span class="hljs-built_in">yes</span> so that systemd does not reset the cgroups of docker containers</span><br>Delegate=yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">kill</span> only the docker process, not all processes <span class="hljs-keyword">in</span> the cgroup</span><br>KillMode=process<br><span class="hljs-meta prompt_"># </span><span class="language-bash">restart the docker process <span class="hljs-keyword">if</span> it exits prematurely</span><br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br>  <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><p>赋予docker服务配置文件docker.service执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod +x /etc/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p>启动docker服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#加载systemctl配置</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker.service <br><span class="hljs-comment">#启动docker服务</span><br><span class="hljs-built_in">sudo</span> systemctl start docker <br><span class="hljs-comment">#检查docker状态</span><br><span class="hljs-built_in">sudo</span> systemctl status docker<br><span class="hljs-comment">#查看docker版本</span><br>docker -v<br></code></pre></td></tr></table></figure><p>自定义docker运行目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置docker服务自定义设置</span><br>sudo mkdir -p /etc/docker<br>sudo mkdir -p /data/app/dockerWork<br>sudo vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>在文件中添加下述内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>  &quot;data-root&quot;: &quot;/data/dockerData&quot;,#填入自己的目录<br>&#125;<br></code></pre></td></tr></table></figure><p>更改后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl daemon-reload<br>sudo systemctl restart docker <br>docker info #输出查看Root Dir<br></code></pre></td></tr></table></figure><p>出现的问题：exec: “fuse-overlayfs”: executable file not found in $PATH</p><p>解决办法：安装fuse-overlayfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装yun-utils</span><br>sudo yum install -y yum-utils<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在联网的机器中下载rpm</span><br>mkdir -p /tmp/fuse-overlayfs &amp;&amp; cd /tmp/fuse-overlayfs<br>yumdownloader --resolve --destdir=. fuse-overlayfs<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将下载好的包拷贝到目标服务器，并在目录下执行</span><br>sudo rpm -Uvh --force *.rpm<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证安装</span><br>fuse-overlayfs --version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过程可能出现错误：依赖检测失败：</span><br>libfuse3.so.3()(64bit) 被 fuse-overlayfs-0.7.2-6.el7_8.x86_64 需要<br>libfuse3.so.3(FUSE_3.0)(64bit) 被 fuse-overlayfs-0.7.2-6.el7_8.x86_64 需要<br>libfuse3.so.3(FUSE_3.2)(64bit) 被 fuse-overlayfs-0.7.2-6.el7_8.x86_64 需要<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用下述命令继续下载缺失包</span><br>yumdownloader --resolve fuse3 fuse3-libs<br><br></code></pre></td></tr></table></figure><p>离线安装docker compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载安装包</span><br>https://github.com/docker/compose/releases<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者</span><br>wget https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64<br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制到离线服务器上</span><br>chmod +x docker-compose-linux-x86_64<br>mv docker-compose-linux-x86_64 docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将文件放到Docker CLI插件默认目录中</span><br>mkdir -p ~/.docker/cli-plugins<br>mv docker-compose ~/.docker/cli-plugins/docker-compose<br>chmod +x ~/.docker/cli-plugins/docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者放到系统级插件目录</span><br>sudo mkdir -p /usr/local/lib/docker/cli-plugins<br>sudo mv docker-compose /usr/local/lib/docker/cli-plugins/docker-compose<br>sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证安装</span><br>docker compose version<br><br></code></pre></td></tr></table></figure><p>部署docker出现问题：当前用户无法访问docker守护进程的Unix socker文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br>permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.45/containers/json?all=1&quot;: dial unix /var/run/docker.sock: connect: permission denied <br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看 socket 文件的权限：</span><br>ls -l /var/run/docker.sock<br><span class="hljs-meta prompt_">#</span><span class="language-bash">正常情况是</span><br>srw-rw---- 1 root docker 0 Jul 25 22:13 /var/run/docker.sock<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果组不是 docker，或没有 rw- 权限，执行：</span><br>sudo chown root:docker /var/run/docker.sock<br>sudo chmod 660 /var/run/docker.sock<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将当前用户添加到docker组</span><br>sudo groupadd docker<br>sudo usermod -aG docker $USER<br>newgrp docker<br></code></pre></td></tr></table></figure><h2 id="离线部署Judge"><a href="#离线部署Judge" class="headerlink" title="离线部署Judge"></a>离线部署Judge</h2><p>首先在联网机器上准备好judge0的镜像和代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">克隆judge0项目</span><br>git clone https://github.com/judge0/judge0.git<br>cd judge0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载镜像</span><br>docker compose -f docker-compose.yml pull<br><span class="hljs-meta prompt_">#</span><span class="language-bash">导出镜像</span><br>docker save -o judge0_images.tar judge0/judge0:latest postgres:16.2 redis:7.2.4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝镜像到离线机器 导入</span><br>docker load -i judge0_images.tar<br></code></pre></td></tr></table></figure><p>在judge目录中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><p>然后就能看到启动的容器，不出意外的话就能访问judge0的api了</p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://localhost:2358/languages<br></code></pre></td></tr></table></figure><h2 id="部署遇到的问题"><a href="#部署遇到的问题" class="headerlink" title="部署遇到的问题"></a>部署遇到的问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ghips@cugsat11 DZ01]$ docker load -i judge0_images.tar<br>dd5242c2dc8a: Loading layer  119.2MB/119.2MB<br>6f1c84e6ec59: Loading layer  17.11MB/17.11MB<br>b52c1c103fae: Loading layer  17.85MB/17.85MB<br>e6d60910d056: Loading layer  149.9MB/149.9MB<br>f63773c65620: Loading layer  520.2MB/520.2MB<br>c8e492f75d96: Loading layer  502.4MB/502.4MB<br>c0b285f105a3: Loading layer  139.1MB/139.1MB<br>94f42f282973: Loading layer  355.6MB/355.6MB<br>a01174846de8: Loading layer  839.9MB/839.9MB<br>93ef8e607237: Loading layer  330.6MB/330.6MB<br>96bdb92d8d86: Loading layer  14.15MB/14.15MB<br>a977fbf9c987: Loading layer  225.9MB/225.9MB<br>74fd0441fe80: Loading layer  2.084GB/2.084GB<br>706af213e51e: Loading layer  669.6MB/669.6MB<br>2dc66f1cc28d: Loading layer  76.08MB/76.08MB<br>write /var/lib/docker/vfs/dir/c001c39b7e4fb4d7b256da603489645fb69c5da681836004af90e325c5c9bd22/usr/local/ghc-8.8.1/lib/ghc-8.8.1/Cabal-3.0.0.0/HSCabal-3.0.0.0.o: no space left on device<br></code></pre></td></tr></table></figure><p>上述没空间了，可以切换docker运行目录。</p><p>问题2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ghips@cugsat11 DZ01]$ sudo docker load -i judge0_images.tar<br>dd5242c2dc8a: Loading layer  119.2MB/119.2MB<br>6f1c84e6ec59: Loading layer  17.11MB/17.11MB<br>b52c1c103fae: Loading layer  17.85MB/17.85MB<br>e6d60910d056: Loading layer  149.9MB/149.9MB<br>f63773c65620: Loading layer  520.2MB/520.2MB<br>c8e492f75d96: Loading layer  502.4MB/502.4MB<br>c0b285f105a3: Loading layer  139.1MB/139.1MB<br>94f42f282973: Loading layer  355.6MB/355.6MB<br>a01174846de8: Loading layer  839.9MB/839.9MB<br>93ef8e607237: Loading layer  330.6MB/330.6MB<br>96bdb92d8d86: Loading layer  14.15MB/14.15MB<br>a977fbf9c987: Loading layer  225.9MB/225.9MB<br>74fd0441fe80: Loading layer  2.084GB/2.084GB<br>706af213e51e: Loading layer  669.6MB/669.6MB<br>2dc66f1cc28d: Loading layer  76.08MB/76.08MB<br>d4b5a090f908: Loading layer  138.3MB/138.3MB<br>6abc0d38bb19: Loading layer  9.417MB/9.417MB<br>c3cba357858f: Loading layer  354.5MB/354.5MB<br>1f8a2cdb429f: Loading layer  335.2MB/335.2MB<br>8e405162993d: Loading layer  40.47MB/40.47MB<br>ddc736983f7e: Loading layer  352.2MB/352.2MB<br>7265bf73ba48: Loading layer    152MB/152MB<br>363040cff96d: Loading layer  216.9MB/216.9MB<br>597b3b3b8563: Loading layer  434.7kB/434.7kB<br>8323279740f2: Loading layer  152.2MB/152.2MB<br>beb324aeeb51: Loading layer  2.868MB/2.868MB<br>19f87ad64a26: Loading layer  13.05MB/13.05MB<br>0e9bb4586e45: Loading layer  41.63MB/41.63MB<br>5fae1865d171: Loading layer  2.953MB/2.953MB<br>d85c09b6bff0: Loading layer  1.228GB/1.228GB<br>b040914a6c33: Loading layer  61.36MB/61.36MB<br>e546454d5a85: Loading layer  56.46MB/56.46MB<br>unlinkat /etc/logcheck/ignore.d.server: invalid argument<br></code></pre></td></tr></table></figure><p>将 Docker 存储驱动切换成 <code>vfs</code>可以解决上述问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;storage-driver&quot;: &quot;vfs&quot;<br></code></pre></td></tr></table></figure><p>问题3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ghips@cugsat11 judge0]$ curl http://localhost:2358/languages<br>curl: (56) Recv failure: Connection reset by peer<br></code></pre></td></tr></table></figure><p>这个问题暂时不知道如何解决，<strong>可能是系统内核版本太低</strong>又或者是其他问题。</p><p>但是我采取曲线救国策略，利用下述命令可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec judge0-server-1 curl http://localhost:2358/languages<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>在线IDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&#39;模仿MYDB之路&#39;</title>
    <link href="/2025/07/11/%E6%A8%A1%E4%BB%BFMYDB%E4%B9%8B%E8%B7%AF/"/>
    <url>/2025/07/11/%E6%A8%A1%E4%BB%BFMYDB%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="模仿实现开源项目MYDB（01）"><a href="#模仿实现开源项目MYDB（01）" class="headerlink" title="模仿实现开源项目MYDB（01）"></a>模仿实现开源项目MYDB（01）</h2><h3 id="理解TM（Transaction-Manager）"><a href="#理解TM（Transaction-Manager）" class="headerlink" title="理解TM（Transaction  Manager）"></a>理解TM（Transaction  Manager）</h3><p>几个关键知识点：</p><ol><li><p><strong>事务：事务是数据库中一组操作的集合，要么全部执行成功，要么全部不执行，是不可分割的逻辑单位。</strong></p><table><thead><tr><th>特性</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><strong>A</strong> 原子性（Atomicity）</td><td>事务中的所有操作要么全部执行，要么全部不执行</td><td>转账不能只扣钱不加钱</td></tr><tr><td><strong>C</strong> 一致性（Consistency）</td><td>执行事务前后，数据库处于一致状态</td><td>转账前后总金额不变</td></tr><tr><td><strong>I</strong> 隔离性（Isolation）</td><td>多个事务并发执行时，不应相互干扰</td><td>同时转账不会互相覆盖数据</td></tr><tr><td><strong>D</strong> 持久性（Durability）</td><td>事务一旦提交，对数据库的更改就是永久的，即使系统崩溃也不会丢失</td><td>转账成功后即使断电也不会丢失结果</td></tr></tbody></table></li></ol><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><ul><li>检查XID文件是否合法（检查文件完整性）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkXIDCounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">fileLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 获取 XID 文件的物理长度，如果读取失败或文件长度不足头部长度（LEN_XID_HEADER_LENGTH），则认为文件损坏。</span><br>    <span class="hljs-keyword">try</span> &#123;<br>            fileLen = file.length();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fileLen &lt; LEN_XID_HEADER_LENGTH) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>    <span class="hljs-comment">//从文件头部读取 8 字节（long类型）作为当前事务计数器值，用于后续一致性校验。</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(LEN_XID_HEADER_LENGTH);<br>        <span class="hljs-keyword">try</span> &#123;<br>            fc.position(<span class="hljs-number">0</span>);<span class="hljs-comment">//设置文件起始处（文件头）</span><br>            fc.read(buf);<span class="hljs-comment">//从当前文件位置开始读取数据，一直读到缓冲区被填满</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Panic.panic(e);<br>        &#125;<br>    <span class="hljs-comment">//getXidPosition(xid) 方法计算指定 XID 在文件中的位置（例如，每个事务状态占 8 字节，XID=1 的位置是 8，XID=2 的位置是 16...）。</span><br>        <span class="hljs-built_in">this</span>.xidCounter = Parser.parseLong(buf.array());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> getXidPosition(<span class="hljs-built_in">this</span>.xidCounter + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(end != fileLen) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>更新事务ID在文件中的状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateXID</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, <span class="hljs-type">byte</span> status)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getXidPosition(xid);<span class="hljs-comment">//计算xid在文件中的位置</span><br>    <span class="hljs-type">byte</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[XID_FIELD_SIZE];<br>    tmp[<span class="hljs-number">0</span>] = status;<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(tmp);<span class="hljs-comment">//讲byte[]包装成ByteBuffer</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        fc.position(offset);<br>        fc.write(buf);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        Panic.panic(e);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fc.force(<span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        Panic.panic(e);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">fc.force(false) 是文件通道（FileChannel）的一个重要方法，主要用于确保数据真正写入磁盘，而不只是停留在操作系统的缓存中。</span><br><span class="hljs-comment">数据写入的流程</span><br><span class="hljs-comment">在向文件写入数据时，操作系统通常会先把数据存储在内存缓存（页缓存）中，之后再择机将数据刷新到磁盘。这种机制虽然能提升性能，但存在数据丢失的风险，比如在系统崩溃或者掉电的情况下，缓存中的数据就可能丢失。</span><br><span class="hljs-comment">force() 方法的作用</span><br><span class="hljs-comment">fc.force(metaData) 方法会强制把通道中尚未写入磁盘的数据刷新到磁盘。这里的参数 metaData 是一个布尔值：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">当 metaData 为 true 时，文件内容和元数据（像文件修改时间、权限等）都会被刷新到磁盘。</span><br><span class="hljs-comment">当 metaData 为 false 时，只会刷新文件内容。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在事务处理中的意义</span><br><span class="hljs-comment">在数据库事务处理系统中，为了保证事务的持久性（D），必须确保事务状态被真正写入磁盘。因此，在更新事务状态后，调用 fc.force(false) 能保证：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">即使系统崩溃，之前记录的事务状态（如已提交、已回滚）也不会丢失。</span><br><span class="hljs-comment">下次系统重启时，可以根据这些持久化的事务状态来恢复数据一致性。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>开始一个事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>        counterLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> xidCounter + <span class="hljs-number">1</span>;<br>            updateXID(xid, FIELD_TRAN_ACTIVE);<br>            incrXIDCounter();<br>            <span class="hljs-keyword">return</span> xid;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            counterLock.unlock();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java面向对象编程知识学习</title>
    <link href="/2025/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Java面向对象编程知识学习"><a href="#Java面向对象编程知识学习" class="headerlink" title="Java面向对象编程知识学习"></a>Java面向对象编程知识学习</h2><h3 id="Java三大特性：封装继承多态"><a href="#Java三大特性：封装继承多态" class="headerlink" title="Java三大特性：封装继承多态"></a>Java三大特性：封装继承多态</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章 </p><img src="/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/01.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/11/hello-world/"/>
    <url>/2025/07/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
