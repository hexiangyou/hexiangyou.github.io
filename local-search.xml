<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>&#39;模仿MYDB之路&#39;</title>
    <link href="/2025/07/11/%E6%A8%A1%E4%BB%BFMYDB%E4%B9%8B%E8%B7%AF/"/>
    <url>/2025/07/11/%E6%A8%A1%E4%BB%BFMYDB%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="模仿实现开源项目MYDB（01）"><a href="#模仿实现开源项目MYDB（01）" class="headerlink" title="模仿实现开源项目MYDB（01）"></a>模仿实现开源项目MYDB（01）</h2><h3 id="理解TM（Transaction-Manager）"><a href="#理解TM（Transaction-Manager）" class="headerlink" title="理解TM（Transaction  Manager）"></a>理解TM（Transaction  Manager）</h3><p>几个关键知识点：</p><ol><li><p><strong>事务：事务是数据库中一组操作的集合，要么全部执行成功，要么全部不执行，是不可分割的逻辑单位。</strong></p><table><thead><tr><th>特性</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><strong>A</strong> 原子性（Atomicity）</td><td>事务中的所有操作要么全部执行，要么全部不执行</td><td>转账不能只扣钱不加钱</td></tr><tr><td><strong>C</strong> 一致性（Consistency）</td><td>执行事务前后，数据库处于一致状态</td><td>转账前后总金额不变</td></tr><tr><td><strong>I</strong> 隔离性（Isolation）</td><td>多个事务并发执行时，不应相互干扰</td><td>同时转账不会互相覆盖数据</td></tr><tr><td><strong>D</strong> 持久性（Durability）</td><td>事务一旦提交，对数据库的更改就是永久的，即使系统崩溃也不会丢失</td><td>转账成功后即使断电也不会丢失结果</td></tr></tbody></table></li></ol><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><ul><li>检查XID文件是否合法（检查文件完整性）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkXIDCounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">fileLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 获取 XID 文件的物理长度，如果读取失败或文件长度不足头部长度（LEN_XID_HEADER_LENGTH），则认为文件损坏。</span><br>    <span class="hljs-keyword">try</span> &#123;<br>            fileLen = file.length();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fileLen &lt; LEN_XID_HEADER_LENGTH) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>    <span class="hljs-comment">//从文件头部读取 8 字节（long类型）作为当前事务计数器值，用于后续一致性校验。</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(LEN_XID_HEADER_LENGTH);<br>        <span class="hljs-keyword">try</span> &#123;<br>            fc.position(<span class="hljs-number">0</span>);<span class="hljs-comment">//设置文件起始处（文件头）</span><br>            fc.read(buf);<span class="hljs-comment">//从当前文件位置开始读取数据，一直读到缓冲区被填满</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Panic.panic(e);<br>        &#125;<br>    <span class="hljs-comment">//getXidPosition(xid) 方法计算指定 XID 在文件中的位置（例如，每个事务状态占 8 字节，XID=1 的位置是 8，XID=2 的位置是 16...）。</span><br>        <span class="hljs-built_in">this</span>.xidCounter = Parser.parseLong(buf.array());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> getXidPosition(<span class="hljs-built_in">this</span>.xidCounter + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(end != fileLen) &#123;<br>            Panic.panic(Error.BadXIDFileException);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>更新事务ID在文件中的状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateXID</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, <span class="hljs-type">byte</span> status)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getXidPosition(xid);<span class="hljs-comment">//计算xid在文件中的位置</span><br>    <span class="hljs-type">byte</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[XID_FIELD_SIZE];<br>    tmp[<span class="hljs-number">0</span>] = status;<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(tmp);<span class="hljs-comment">//讲byte[]包装成ByteBuffer</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        fc.position(offset);<br>        fc.write(buf);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        Panic.panic(e);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fc.force(<span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        Panic.panic(e);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">fc.force(false) 是文件通道（FileChannel）的一个重要方法，主要用于确保数据真正写入磁盘，而不只是停留在操作系统的缓存中。</span><br><span class="hljs-comment">数据写入的流程</span><br><span class="hljs-comment">在向文件写入数据时，操作系统通常会先把数据存储在内存缓存（页缓存）中，之后再择机将数据刷新到磁盘。这种机制虽然能提升性能，但存在数据丢失的风险，比如在系统崩溃或者掉电的情况下，缓存中的数据就可能丢失。</span><br><span class="hljs-comment">force() 方法的作用</span><br><span class="hljs-comment">fc.force(metaData) 方法会强制把通道中尚未写入磁盘的数据刷新到磁盘。这里的参数 metaData 是一个布尔值：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">当 metaData 为 true 时，文件内容和元数据（像文件修改时间、权限等）都会被刷新到磁盘。</span><br><span class="hljs-comment">当 metaData 为 false 时，只会刷新文件内容。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在事务处理中的意义</span><br><span class="hljs-comment">在数据库事务处理系统中，为了保证事务的持久性（D），必须确保事务状态被真正写入磁盘。因此，在更新事务状态后，调用 fc.force(false) 能保证：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">即使系统崩溃，之前记录的事务状态（如已提交、已回滚）也不会丢失。</span><br><span class="hljs-comment">下次系统重启时，可以根据这些持久化的事务状态来恢复数据一致性。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>开始一个事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span> &#123;<br>        counterLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> xidCounter + <span class="hljs-number">1</span>;<br>            updateXID(xid, FIELD_TRAN_ACTIVE);<br>            incrXIDCounter();<br>            <span class="hljs-keyword">return</span> xid;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            counterLock.unlock();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java面向对象编程知识学习</title>
    <link href="/2025/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/07/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Java面向对象编程知识学习"><a href="#Java面向对象编程知识学习" class="headerlink" title="Java面向对象编程知识学习"></a>Java面向对象编程知识学习</h2><h3 id="Java三大特性：封装继承多态"><a href="#Java三大特性：封装继承多态" class="headerlink" title="Java三大特性：封装继承多态"></a>Java三大特性：封装继承多态</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章 </p><img src="/2025/07/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/01.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/11/hello-world/"/>
    <url>/2025/07/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
